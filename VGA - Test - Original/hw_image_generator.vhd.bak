LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY hw_image_generator IS
	PORT(
		disp_ena		:	IN		STD_LOGIC;	--display enable ('1' = display time, '0' = blanking time)
		row			:	IN		INTEGER;		--row pixel coordinate
		column		:	IN		INTEGER;		--column pixel coordinate
		SW				:	IN		STD_LOGIC_VECTOR(17 DOWNTO 0);
		KEY			:	IN		STD_LOGIC_VECTOR(3 DOWNTO 0);
		red			:	OUT	STD_LOGIC_VECTOR(7 DOWNTO 0) := (OTHERS => '0');  --red magnitude output to DAC
		green			:	OUT	STD_LOGIC_VECTOR(7 DOWNTO 0) := (OTHERS => '0');  --green magnitude output to DAC
		blue			:	OUT	STD_LOGIC_VECTOR(7 DOWNTO 0) := (OTHERS => '0')); --blue magnitude output to DAC
END hw_image_generator;

ARCHITECTURE behavior OF hw_image_generator IS

SIGNAL start_x: INTEGER RANGE 0 TO 800:=0;
SIGNAL start_y: INTEGER RANGE 0 TO 600:=0;

SIGNAL pixels_x: INTEGER RANGE 0 TO 800:=200;
SIGNAL pixels_y: INTEGER RANGE 0 TO 600:=200;

BEGIN
	PROCESS(disp_ena, row, column)
	BEGIN

		IF(disp_ena = '1') THEN		--display time
			
			-- left: RED
			IF(row >= 550 AND row < 600 AND column >= 125 AND column < 125+150) THEN
				IF KEY(3) = '0' THEN
					red <= (OTHERS => '1');
					green	<= (OTHERS => '0');
					blue <= (OTHERS => '0');
				ELSE
					red <= "11110100";
					green	<= "01110111";
					blue <= "01000010";
				END IF;
			
			-- middle: GREEN
			ELSIF(row >= 550 AND row < 600 AND column >= 325 AND column < 325+150) THEN
				IF KEY(2) = '0' THEN
					red <= (OTHERS => '0');
					green	<= (OTHERS => '1');
					blue <= (OTHERS => '0');
				ELSE
					red <= "00010011";
					green	<= "10100101";
					blue <= "00101110";
				END IF;
			
			-- right: BLUE
			ELSIF(row >= 550 AND row < 600 AND column >= 525 AND column < 525+150) THEN
				IF KEY(1) = '0' THEN
					red <= (OTHERS => '0');
					green	<= (OTHERS => '0');
					blue <= (OTHERS => '1');
				ELSE
					red <= "00101011";
					green	<= "00010010";
					blue <= "10100101";
				END IF;
			
			ELSE
				red <= "11011110";
				green	<= "11011110";
				blue <= "11011110";
			END IF;
		ELSE								--blanking time
			red <= (OTHERS => '0');
			green <= (OTHERS => '0');
			blue <= (OTHERS => '0');
		END IF;
		
--		IF(SW(17)'event AND SW(17) = '1') THEN
--			start_x <= 0;
--			start_y <= 0;
--		END IF;
		
--		IF(SW(0)'event AND SW(0) = '1') THEN
--				start_x <= (start_x + 10) rem 800;
--		END IF;

--		IF(SW(1)'event AND SW(1) = '1') THEN
--			start_y <= (start_y + 10) rem 600;
--		END IF;
		
		
	
	END PROCESS;
END behavior;