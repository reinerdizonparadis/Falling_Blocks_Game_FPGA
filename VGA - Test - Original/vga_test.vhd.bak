LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY vga_test IS
	PORT(
		CLOCK_27	: IN STD_LOGIC;
		SW			: IN STD_LOGIC_VECTOR(17 DOWNTO 0);
		KEY		: IN STD_LOGIC_VECTOR(3 DOWNTO 0);
		VGA_CLK 					: OUT STD_LOGIC;
		VGA_HS, VGA_VS			: OUT STD_LOGIC;
		VGA_BLANK, VGA_SYNC	: OUT STD_LOGIC;
		VGA_R, VGA_G, VGA_B	: OUT STD_LOGIC_VECTOR(7 downto 0));
END vga_test;

ARCHITECTURE behavior OF vga_test IS

COMPONENT vga_pll IS
	PORT (
		clk_in_clk  : IN  STD_LOGIC := 'X';
		reset_reset : IN  STD_LOGIC := 'X'; 
		clk_out_clk : OUT STD_LOGIC       
	);
END COMPONENT vga_pll;

COMPONENT vga_controller IS
	GENERIC(
		h_pulse 	:	INTEGER := 112;    	--horiztonal sync pulse width in pixels
		h_bp	 	:	INTEGER := 248;		--horiztonal back porch width in pixels
		h_pixels	:	INTEGER := 1280;		--horiztonal display width in pixels
		h_fp	 	:	INTEGER := 48;		--horiztonal front porch width in pixels
		h_pol		:	STD_LOGIC := '1';	--horizontal sync pulse polarity (1 = positive, 0 = negative)
		v_pulse 	:	INTEGER := 3;		--vertical sync pulse width in rows
		v_bp	 	:	INTEGER := 38;		--vertical back porch width in rows
		v_pixels	:	INTEGER := 1024;		--vertical display width in rows
		v_fp	 	:	INTEGER := 1;		--vertical front porch width in rows
		v_pol		:	STD_LOGIC := '1');	--vertical sync pulse polarity (1 = positive, 0 = negative)
	PORT(
		pixel_clk	:	IN	STD_LOGIC;	--pixel clock at frequency of VGA mode being used
		reset_n		:	IN	STD_LOGIC;	--active low asycnchronous reset
		h_sync		:	OUT	STD_LOGIC;	--horiztonal sync pulse
		v_sync		:	OUT	STD_LOGIC;	--vertical sync pulse
		disp_ena	:	OUT	STD_LOGIC;	--display enable ('1' = display time, '0' = blanking time)
		column		:	OUT	INTEGER;	--horizontal pixel coordinate
		row			:	OUT	INTEGER;	--vertical pixel coordinate
		n_blank		:	OUT	STD_LOGIC;	--direct blacking output to DAC
		n_sync		:	OUT	STD_LOGIC); --sync-on-green output to DAC
END COMPONENT vga_controller;

COMPONENT hw_image_generator IS
	PORT(
		disp_ena	:	IN	STD_LOGIC;	--display enable ('1' = display time, '0' = blanking time)
		row		:	IN	INTEGER;	--row pixel coordinate
		column	:	IN	INTEGER;	--column pixel coordinate
		SW			:	IN		STD_LOGIC_VECTOR(17 DOWNTO 0);
		KEY			:	IN		STD_LOGIC_VECTOR(3 DOWNTO 0);
		red		:	OUT	STD_LOGIC_VECTOR(7 DOWNTO 0) := (OTHERS => '0');  --red magnitude output to DAC
		green		:	OUT	STD_LOGIC_VECTOR(7 DOWNTO 0) := (OTHERS => '0');  --green magnitude output to DAC
		blue		:	OUT	STD_LOGIC_VECTOR(7 DOWNTO 0) := (OTHERS => '0')); --blue magnitude output to DAC
END COMPONENT hw_image_generator;

SIGNAL px_clk, disp_ena : STD_LOGIC;
SIGNAL vga_col, vga_row : INTEGER;

BEGIN
	
	inst0: vga_pll PORT MAP(
		clk_in_clk => CLOCK_27,
		reset_reset => '0',
		clk_out_clk => px_clk
	);
	
	VGA_CLK <= px_clk;
	
	inst1: vga_controller PORT MAP(
		pixel_clk => px_clk,
		reset_n => '1',
		h_sync => VGA_HS,
		v_sync => VGA_VS,
		disp_ena => disp_ena,
		column => vga_col,
		row => vga_row,
		n_blank => VGA_BLANK,
		n_sync => VGA_SYNC
	);
	
	inst2: hw_image_generator PORT MAP(
		disp_ena => disp_ena,
		row => vga_row,
		column => vga_col,
		SW => SW,
		KEY => KEY,
		red => VGA_R,
		green => VGA_G,
		blue => VGA_B
	);
	
END behavior;
